version: 2.1

orbs:
  docker: circleci/docker@1.0.1

jobs:
  prepare-dependencies:
    docker:
      - image: node:current-alpine
    steps:
      - checkout
      - run:
          name: Compute version number
          command: echo "0.0.${CIRCLE_BUILD_NUM}-${CIRCLE_SHA1:0:7}" | tee version.txt
      - restore_cache:
          keys:
            - yarn-deps-{{ checksum "yarn.lock" }}
            - yarn-deps
      - run:
          name: yarn install
          command: yarn install
      - save_cache:
          paths:
            - node_modules
          key: yarn-deps-{{ checksum "yarn.lock" }}-{{ epoch }}
      - store_artifacts:
          path: yarn.lock
      - persist_to_workspace:
          root: .
          paths:
            - .

  build-production:
    docker:
      - image: node:current-alpine
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Production build
          command: |
            export __BUILD_VERSION="$(cat version.txt)"
            yarn build
      - store_artifacts:
          path: dist/server.js
      - persist_to_workspace:
          root: .
          paths:
            - .

  build-docker-image:
    machine:
      image: ubuntu-1604:202004-01
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Setup __BUILD_VERSION envvar
          command: |
            echo "export __BUILD_VERSION=\"$(cat version.txt)\"" >> $BASH_ENV
      - docker/check:
          registry: $DOCKER_REGISTRY
      - docker/build:
          image: $DOCKER_IMAGE_NAME
          tag: $__BUILD_VERSION
          registry: $DOCKER_REGISTRY
      - docker/push:
          image: $DOCKER_IMAGE_NAME
          tag: $__BUILD_VERSION
          registry: $DOCKER_REGISTRY

  test:
    docker:
      - image: node:current-alpine
    parallelism: 2
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Run tests
          command: |
            circleci tests glob '**/*.test.ts' | circleci tests split --split-by timings | xargs yarn test:ci
      - store_artifacts:
          path: test-results
      - store_test_results:
          path: test-results

  deploy-docker-image:
    machine:
      image: ubuntu-2004:202008-01
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Setup __BUILD_VERSION envvar
          command: |
            echo "export __BUILD_VERSION=\"$(cat version.txt)\"" | tee -a $BASH_ENV
      - run:
          name: Enable `docker manifest` command
          command: |
            mkdir -p ~/.docker
            if [ ! -f ~/.docker/config.json ]
            then
              echo '{}' > ~/.docker/config.json
            fi

            cat <<#< $(jq '.experimental = "enabled"' ~/.docker/config.json) > ~/.docker/config.json
      - docker/check:
          registry: $DOCKER_REGISTRY
      - run:
          name: Update `latest` tag with the version
          command: |
            docker manifest create $DOCKER_REGISTRY/$DOCKER_IMAGE_NAME:latest $DOCKER_REGISTRY/$DOCKER_IMAGE_NAME:$__BUILD_VERSION
            docker manifest push $DOCKER_REGISTRY/$DOCKER_IMAGE_NAME:latest

workflows:
  version: 2
  build-test-deploy:
    jobs:
      - prepare-dependencies
      - build-production:
          requires:
            - prepare-dependencies
      - build-docker-image:
          context: acr
          requires:
            - build-production
      - test:
          requires:
            - prepare-dependencies
      - wait-deploy-approval:
          type: approval
          requires:
            - build-docker-image
            - test
      - deploy-docker-image:
          context: acr
          requires:
            - wait-deploy-approval
